/* Window.c generated by valac 0.40.11, the Vala compiler
 * generated from Window.vala, do not modify */

/*
* Copyright (C) 2018  Carlos Lopez <calo_lrc@hotmail.com>
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
* 
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <granite.h>
#include <gdk/gdk.h>
#include <stdlib.h>
#include <string.h>


#define APP_TYPE_WINDOW (app_window_get_type ())
#define APP_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), APP_TYPE_WINDOW, AppWindow))
#define APP_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), APP_TYPE_WINDOW, AppWindowClass))
#define APP_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), APP_TYPE_WINDOW))
#define APP_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), APP_TYPE_WINDOW))
#define APP_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), APP_TYPE_WINDOW, AppWindowClass))

typedef struct _AppWindow AppWindow;
typedef struct _AppWindowClass AppWindowClass;
typedef struct _AppWindowPrivate AppWindowPrivate;

#define APP_CONFIGS_TYPE_SETTINGS (app_configs_settings_get_type ())
#define APP_CONFIGS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), APP_CONFIGS_TYPE_SETTINGS, AppConfigsSettings))
#define APP_CONFIGS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), APP_CONFIGS_TYPE_SETTINGS, AppConfigsSettingsClass))
#define APP_CONFIGS_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), APP_CONFIGS_TYPE_SETTINGS))
#define APP_CONFIGS_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), APP_CONFIGS_TYPE_SETTINGS))
#define APP_CONFIGS_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), APP_CONFIGS_TYPE_SETTINGS, AppConfigsSettingsClass))

typedef struct _AppConfigsSettings AppConfigsSettings;
typedef struct _AppConfigsSettingsClass AppConfigsSettingsClass;
enum  {
	APP_WINDOW_0_PROPERTY,
	APP_WINDOW_NUM_PROPERTIES
};
static GParamSpec* app_window_properties[APP_WINDOW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

struct _AppWindow {
	GtkWindow parent_instance;
	AppWindowPrivate * priv;
};

struct _AppWindowClass {
	GtkWindowClass parent_class;
};

struct _AppWindowPrivate {
	AppConfigsSettings* settings;
};


static gpointer app_window_parent_class = NULL;

GType app_window_get_type (void) G_GNUC_CONST;
GType app_configs_settings_get_type (void) G_GNUC_CONST;
#define APP_WINDOW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), APP_TYPE_WINDOW, AppWindowPrivate))
AppWindow* app_window_new (GtkApplication* app);
AppWindow* app_window_construct (GType object_type,
                                 GtkApplication* app);
#define APP_CONFIGS_CONSTANTS_APP_ICON "com.github.calo001.luna"
AppConfigsSettings* app_configs_settings_get_instance (void);
gint app_configs_settings_get_window_x (AppConfigsSettings* self);
gint app_configs_settings_get_window_y (AppConfigsSettings* self);
const gchar* app_configs_settings_get_color (AppConfigsSettings* self);
gchar* app_enums_color_string_to_css_path (const gchar* color);
static gboolean __lambda24_ (AppWindow* self,
                      GdkEventButton* e);
static gboolean ___lambda24__gtk_widget_button_press_event (GtkWidget* _sender,
                                                     GdkEventButton* event,
                                                     gpointer self);
static gboolean app_window_real_configure_event (GtkWidget* base,
                                          GdkEventConfigure* event);
void app_configs_settings_set_window_x (AppConfigsSettings* self,
                                        gint value);
void app_configs_settings_set_window_y (AppConfigsSettings* self,
                                        gint value);
static void app_window_finalize (GObject * obj);


static gpointer
_g_object_ref0 (gpointer self)
{
#line 57 "/run/build/Luna/src/Window.vala"
	return self ? g_object_ref (self) : NULL;
#line 108 "Window.c"
}


static gboolean
__lambda24_ (AppWindow* self,
             GdkEventButton* e)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 77 "/run/build/Luna/src/Window.vala"
	g_return_val_if_fail (e != NULL, FALSE);
#line 78 "/run/build/Luna/src/Window.vala"
	_tmp0_ = e->button;
#line 78 "/run/build/Luna/src/Window.vala"
	if (_tmp0_ == ((guint) GDK_BUTTON_PRIMARY)) {
#line 124 "Window.c"
		guint _tmp1_;
		gdouble _tmp2_;
		gdouble _tmp3_;
		guint32 _tmp4_;
#line 79 "/run/build/Luna/src/Window.vala"
		_tmp1_ = e->button;
#line 79 "/run/build/Luna/src/Window.vala"
		_tmp2_ = e->x_root;
#line 79 "/run/build/Luna/src/Window.vala"
		_tmp3_ = e->y_root;
#line 79 "/run/build/Luna/src/Window.vala"
		_tmp4_ = e->time;
#line 79 "/run/build/Luna/src/Window.vala"
		gtk_window_begin_move_drag ((GtkWindow*) self, (gint) _tmp1_, (gint) _tmp2_, (gint) _tmp3_, _tmp4_);
#line 80 "/run/build/Luna/src/Window.vala"
		result = TRUE;
#line 80 "/run/build/Luna/src/Window.vala"
		return result;
#line 143 "Window.c"
	}
#line 82 "/run/build/Luna/src/Window.vala"
	result = FALSE;
#line 82 "/run/build/Luna/src/Window.vala"
	return result;
#line 149 "Window.c"
}


static gboolean
___lambda24__gtk_widget_button_press_event (GtkWidget* _sender,
                                            GdkEventButton* event,
                                            gpointer self)
{
	gboolean result;
	result = __lambda24_ ((AppWindow*) self, event);
#line 77 "/run/build/Luna/src/Window.vala"
	return result;
#line 162 "Window.c"
}


AppWindow*
app_window_construct (GType object_type,
                      GtkApplication* app)
{
	AppWindow * self = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	AppConfigsSettings* _tmp2_;
	AppConfigsSettings* _tmp3_;
	gint x = 0;
	AppConfigsSettings* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	gint y = 0;
	AppConfigsSettings* _tmp7_;
	gint _tmp8_;
	gint _tmp9_;
	gchar* css = NULL;
	AppConfigsSettings* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	gboolean _tmp14_ = FALSE;
	gint _tmp15_;
	GtkCssProvider* css_provider = NULL;
	GtkCssProvider* _tmp19_;
	gchar* css_path = NULL;
	const gchar* _tmp20_;
	gchar* _tmp21_;
	GdkScreen* _tmp22_;
#line 45 "/run/build/Luna/src/Window.vala"
	g_return_val_if_fail (app != NULL, NULL);
#line 46 "/run/build/Luna/src/Window.vala"
	self = (AppWindow*) g_object_new (object_type, "application", app, "icon-name", APP_CONFIGS_CONSTANTS_APP_ICON, "resizable", FALSE, NULL);
#line 51 "/run/build/Luna/src/Window.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 51 "/run/build/Luna/src/Window.vala"
	gtk_style_context_add_class (_tmp0_, "widget_background");
#line 52 "/run/build/Luna/src/Window.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 52 "/run/build/Luna/src/Window.vala"
	gtk_style_context_add_class (_tmp1_, "transition");
#line 54 "/run/build/Luna/src/Window.vala"
	gtk_window_set_keep_below ((GtkWindow*) self, TRUE);
#line 55 "/run/build/Luna/src/Window.vala"
	gtk_window_stick ((GtkWindow*) self);
#line 57 "/run/build/Luna/src/Window.vala"
	_tmp2_ = app_configs_settings_get_instance ();
#line 57 "/run/build/Luna/src/Window.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 57 "/run/build/Luna/src/Window.vala"
	_g_object_unref0 (self->priv->settings);
#line 57 "/run/build/Luna/src/Window.vala"
	self->priv->settings = _tmp3_;
#line 58 "/run/build/Luna/src/Window.vala"
	_tmp4_ = self->priv->settings;
#line 58 "/run/build/Luna/src/Window.vala"
	_tmp5_ = app_configs_settings_get_window_x (_tmp4_);
#line 58 "/run/build/Luna/src/Window.vala"
	_tmp6_ = _tmp5_;
#line 58 "/run/build/Luna/src/Window.vala"
	x = _tmp6_;
#line 59 "/run/build/Luna/src/Window.vala"
	_tmp7_ = self->priv->settings;
#line 59 "/run/build/Luna/src/Window.vala"
	_tmp8_ = app_configs_settings_get_window_y (_tmp7_);
#line 59 "/run/build/Luna/src/Window.vala"
	_tmp9_ = _tmp8_;
#line 59 "/run/build/Luna/src/Window.vala"
	y = _tmp9_;
#line 60 "/run/build/Luna/src/Window.vala"
	_tmp10_ = self->priv->settings;
#line 60 "/run/build/Luna/src/Window.vala"
	_tmp11_ = app_configs_settings_get_color (_tmp10_);
#line 60 "/run/build/Luna/src/Window.vala"
	_tmp12_ = _tmp11_;
#line 60 "/run/build/Luna/src/Window.vala"
	_tmp13_ = g_strdup (_tmp12_);
#line 60 "/run/build/Luna/src/Window.vala"
	css = _tmp13_;
#line 62 "/run/build/Luna/src/Window.vala"
	_tmp15_ = x;
#line 62 "/run/build/Luna/src/Window.vala"
	if (_tmp15_ != -1) {
#line 250 "Window.c"
		gint _tmp16_;
#line 62 "/run/build/Luna/src/Window.vala"
		_tmp16_ = y;
#line 62 "/run/build/Luna/src/Window.vala"
		_tmp14_ = _tmp16_ != -1;
#line 256 "Window.c"
	} else {
#line 62 "/run/build/Luna/src/Window.vala"
		_tmp14_ = FALSE;
#line 260 "Window.c"
	}
#line 62 "/run/build/Luna/src/Window.vala"
	if (_tmp14_) {
#line 264 "Window.c"
		gint _tmp17_;
		gint _tmp18_;
#line 63 "/run/build/Luna/src/Window.vala"
		_tmp17_ = x;
#line 63 "/run/build/Luna/src/Window.vala"
		_tmp18_ = y;
#line 63 "/run/build/Luna/src/Window.vala"
		gtk_window_move ((GtkWindow*) self, _tmp17_, _tmp18_);
#line 273 "Window.c"
	}
#line 66 "/run/build/Luna/src/Window.vala"
	_tmp19_ = gtk_css_provider_new ();
#line 66 "/run/build/Luna/src/Window.vala"
	css_provider = _tmp19_;
#line 67 "/run/build/Luna/src/Window.vala"
	_tmp20_ = css;
#line 67 "/run/build/Luna/src/Window.vala"
	_tmp21_ = app_enums_color_string_to_css_path (_tmp20_);
#line 67 "/run/build/Luna/src/Window.vala"
	css_path = _tmp21_;
#line 68 "/run/build/Luna/src/Window.vala"
	gtk_css_provider_load_from_resource (css_provider, css_path);
#line 70 "/run/build/Luna/src/Window.vala"
	_tmp22_ = gdk_screen_get_default ();
#line 70 "/run/build/Luna/src/Window.vala"
	gtk_style_context_add_provider_for_screen (_tmp22_, (GtkStyleProvider*) css_provider, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 77 "/run/build/Luna/src/Window.vala"
	g_signal_connect_object ((GtkWidget*) self, "button-press-event", (GCallback) ___lambda24__gtk_widget_button_press_event, self, 0);
#line 45 "/run/build/Luna/src/Window.vala"
	_g_free0 (css_path);
#line 45 "/run/build/Luna/src/Window.vala"
	_g_object_unref0 (css_provider);
#line 45 "/run/build/Luna/src/Window.vala"
	_g_free0 (css);
#line 45 "/run/build/Luna/src/Window.vala"
	return self;
#line 301 "Window.c"
}


AppWindow*
app_window_new (GtkApplication* app)
{
#line 45 "/run/build/Luna/src/Window.vala"
	return app_window_construct (APP_TYPE_WINDOW, app);
#line 310 "Window.c"
}


static gboolean
app_window_real_configure_event (GtkWidget* base,
                                 GdkEventConfigure* event)
{
	AppWindow * self;
	gboolean result = FALSE;
	gint root_x = 0;
	gint root_y = 0;
	gint _tmp0_ = 0;
	gint _tmp1_ = 0;
	AppConfigsSettings* _tmp2_;
	AppConfigsSettings* _tmp3_;
#line 86 "/run/build/Luna/src/Window.vala"
	self = (AppWindow*) base;
#line 86 "/run/build/Luna/src/Window.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 88 "/run/build/Luna/src/Window.vala"
	gtk_window_get_position ((GtkWindow*) self, &_tmp0_, &_tmp1_);
#line 88 "/run/build/Luna/src/Window.vala"
	root_x = _tmp0_;
#line 88 "/run/build/Luna/src/Window.vala"
	root_y = _tmp1_;
#line 89 "/run/build/Luna/src/Window.vala"
	_tmp2_ = self->priv->settings;
#line 89 "/run/build/Luna/src/Window.vala"
	app_configs_settings_set_window_x (_tmp2_, root_x);
#line 90 "/run/build/Luna/src/Window.vala"
	_tmp3_ = self->priv->settings;
#line 90 "/run/build/Luna/src/Window.vala"
	app_configs_settings_set_window_y (_tmp3_, root_y);
#line 92 "/run/build/Luna/src/Window.vala"
	result = GTK_WIDGET_CLASS (app_window_parent_class)->configure_event ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_window_get_type (), GtkWindow), event);
#line 92 "/run/build/Luna/src/Window.vala"
	return result;
#line 348 "Window.c"
}


static void
app_window_class_init (AppWindowClass * klass)
{
#line 33 "/run/build/Luna/src/Window.vala"
	app_window_parent_class = g_type_class_peek_parent (klass);
#line 33 "/run/build/Luna/src/Window.vala"
	g_type_class_add_private (klass, sizeof (AppWindowPrivate));
#line 33 "/run/build/Luna/src/Window.vala"
	((GtkWidgetClass *) klass)->configure_event = (gboolean (*) (GtkWidget *, GdkEventConfigure*)) app_window_real_configure_event;
#line 33 "/run/build/Luna/src/Window.vala"
	G_OBJECT_CLASS (klass)->finalize = app_window_finalize;
#line 363 "Window.c"
}


static void
app_window_instance_init (AppWindow * self)
{
#line 33 "/run/build/Luna/src/Window.vala"
	self->priv = APP_WINDOW_GET_PRIVATE (self);
#line 372 "Window.c"
}


static void
app_window_finalize (GObject * obj)
{
	AppWindow * self;
#line 33 "/run/build/Luna/src/Window.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, APP_TYPE_WINDOW, AppWindow);
#line 43 "/run/build/Luna/src/Window.vala"
	_g_object_unref0 (self->priv->settings);
#line 33 "/run/build/Luna/src/Window.vala"
	G_OBJECT_CLASS (app_window_parent_class)->finalize (obj);
#line 386 "Window.c"
}


/**
     * Class responsible for creating the u window and will contain contain other widgets. 
     * allowing the user to manipulate the window (resize it, move it, close it, ...).
     *
     * @see Gtk.ApplicationWindow
     * @since 1.0.0
     */
GType
app_window_get_type (void)
{
	static volatile gsize app_window_type_id__volatile = 0;
	if (g_once_init_enter (&app_window_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (AppWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) app_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (AppWindow), 0, (GInstanceInitFunc) app_window_instance_init, NULL };
		GType app_window_type_id;
		app_window_type_id = g_type_register_static (gtk_window_get_type (), "AppWindow", &g_define_type_info, 0);
		g_once_init_leave (&app_window_type_id__volatile, app_window_type_id);
	}
	return app_window_type_id__volatile;
}



